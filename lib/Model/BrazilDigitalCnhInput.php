<?php
/**
 * BrazilDigitalCnhInput
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Trinsic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trinsic API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Trinsic\Api\Model;

use \ArrayAccess;
use \Trinsic\Api\ObjectSerializer;

/**
 * BrazilDigitalCnhInput Class Doc Comment
 *
 * @category Class
 * @package  Trinsic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BrazilDigitalCnhInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BrazilDigitalCnhInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cpf_number' => 'string',
        'digital_cnh_file' => 'string',
        'digital_cnh_file_content_type' => 'string',
        'facial_biometry_photo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cpf_number' => null,
        'digital_cnh_file' => 'byte',
        'digital_cnh_file_content_type' => null,
        'facial_biometry_photo' => 'byte'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cpf_number' => false,
        'digital_cnh_file' => true,
        'digital_cnh_file_content_type' => true,
        'facial_biometry_photo' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpf_number' => 'cpfNumber',
        'digital_cnh_file' => 'digitalCnhFile',
        'digital_cnh_file_content_type' => 'digitalCnhFileContentType',
        'facial_biometry_photo' => 'facialBiometryPhoto'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpf_number' => 'setCpfNumber',
        'digital_cnh_file' => 'setDigitalCnhFile',
        'digital_cnh_file_content_type' => 'setDigitalCnhFileContentType',
        'facial_biometry_photo' => 'setFacialBiometryPhoto'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpf_number' => 'getCpfNumber',
        'digital_cnh_file' => 'getDigitalCnhFile',
        'digital_cnh_file_content_type' => 'getDigitalCnhFileContentType',
        'facial_biometry_photo' => 'getFacialBiometryPhoto'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cpf_number', $data ?? [], null);
        $this->setIfExists('digital_cnh_file', $data ?? [], null);
        $this->setIfExists('digital_cnh_file_content_type', $data ?? [], null);
        $this->setIfExists('facial_biometry_photo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cpf_number'] === null) {
            $invalidProperties[] = "'cpf_number' can't be null";
        }
        if ((mb_strlen($this->container['cpf_number']) > 11)) {
            $invalidProperties[] = "invalid value for 'cpf_number', the character length must be smaller than or equal to 11.";
        }

        if ((mb_strlen($this->container['cpf_number']) < 11)) {
            $invalidProperties[] = "invalid value for 'cpf_number', the character length must be bigger than or equal to 11.";
        }

        if (!preg_match("/^\\d*$/", $this->container['cpf_number'])) {
            $invalidProperties[] = "invalid value for 'cpf_number', must be conform to the pattern /^\\d*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpf_number
     *
     * @return string
     */
    public function getCpfNumber()
    {
        return $this->container['cpf_number'];
    }

    /**
     * Sets cpf_number
     *
     * @param string $cpf_number The user's 11-digit, numeric CPF Number
     *
     * @return self
     */
    public function setCpfNumber($cpf_number)
    {
        if (is_null($cpf_number)) {
            throw new \InvalidArgumentException('non-nullable cpf_number cannot be null');
        }
        if ((mb_strlen($cpf_number) > 11)) {
            throw new \InvalidArgumentException('invalid length for $cpf_number when calling BrazilDigitalCnhInput., must be smaller than or equal to 11.');
        }
        if ((mb_strlen($cpf_number) < 11)) {
            throw new \InvalidArgumentException('invalid length for $cpf_number when calling BrazilDigitalCnhInput., must be bigger than or equal to 11.');
        }
        if ((!preg_match("/^\\d*$/", ObjectSerializer::toString($cpf_number)))) {
            throw new \InvalidArgumentException("invalid value for \$cpf_number when calling BrazilDigitalCnhInput., must conform to the pattern /^\\d*$/.");
        }

        $this->container['cpf_number'] = $cpf_number;

        return $this;
    }

    /**
     * Gets digital_cnh_file
     *
     * @return string|null
     */
    public function getDigitalCnhFile()
    {
        return $this->container['digital_cnh_file'];
    }

    /**
     * Sets digital_cnh_file
     *
     * @param string|null $digital_cnh_file The raw bytes of the digital CNH file collected from the user.
     *
     * @return self
     */
    public function setDigitalCnhFile($digital_cnh_file)
    {
        if (is_null($digital_cnh_file)) {
            array_push($this->openAPINullablesSetToNull, 'digital_cnh_file');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('digital_cnh_file', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['digital_cnh_file'] = $digital_cnh_file;

        return $this;
    }

    /**
     * Gets digital_cnh_file_content_type
     *
     * @return string|null
     */
    public function getDigitalCnhFileContentType()
    {
        return $this->container['digital_cnh_file_content_type'];
    }

    /**
     * Sets digital_cnh_file_content_type
     *
     * @param string|null $digital_cnh_file_content_type The MIME Type of the file contained in `DigitalCnhFile`.              Must be one of `application/pdf`, `image/jpeg`, or `image/png`.
     *
     * @return self
     */
    public function setDigitalCnhFileContentType($digital_cnh_file_content_type)
    {
        if (is_null($digital_cnh_file_content_type)) {
            array_push($this->openAPINullablesSetToNull, 'digital_cnh_file_content_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('digital_cnh_file_content_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['digital_cnh_file_content_type'] = $digital_cnh_file_content_type;

        return $this;
    }

    /**
     * Gets facial_biometry_photo
     *
     * @return string|null
     */
    public function getFacialBiometryPhoto()
    {
        return $this->container['facial_biometry_photo'];
    }

    /**
     * Sets facial_biometry_photo
     *
     * @param string|null $facial_biometry_photo The raw bytes of the image of the user's face, collected for biometric comparison.
     *
     * @return self
     */
    public function setFacialBiometryPhoto($facial_biometry_photo)
    {
        if (is_null($facial_biometry_photo)) {
            array_push($this->openAPINullablesSetToNull, 'facial_biometry_photo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facial_biometry_photo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facial_biometry_photo'] = $facial_biometry_photo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


