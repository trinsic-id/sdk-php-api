<?php
/**
 * ProviderInformation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Trinsic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trinsic API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Trinsic\Api\Model;

use \ArrayAccess;
use \Trinsic\Api\ObjectSerializer;

/**
 * ProviderInformation Class Doc Comment
 *
 * @category Class
 * @package  Trinsic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProviderInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProviderInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'logo_url' => 'string',
        'subtext' => 'string',
        'provider_id' => 'string',
        'provider_display_name' => 'string',
        'provider_logo' => 'string',
        'health' => 'string',
        'sub_providers' => '\Trinsic\Api\Model\SubProviderMetadata[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'logo_url' => null,
        'subtext' => null,
        'provider_id' => null,
        'provider_display_name' => null,
        'provider_logo' => null,
        'health' => null,
        'sub_providers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'logo_url' => false,
        'subtext' => false,
        'provider_id' => false,
        'provider_display_name' => false,
        'provider_logo' => false,
        'health' => false,
        'sub_providers' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'logo_url' => 'logoUrl',
        'subtext' => 'subtext',
        'provider_id' => 'providerId',
        'provider_display_name' => 'providerDisplayName',
        'provider_logo' => 'providerLogo',
        'health' => 'health',
        'sub_providers' => 'subProviders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'logo_url' => 'setLogoUrl',
        'subtext' => 'setSubtext',
        'provider_id' => 'setProviderId',
        'provider_display_name' => 'setProviderDisplayName',
        'provider_logo' => 'setProviderLogo',
        'health' => 'setHealth',
        'sub_providers' => 'setSubProviders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'logo_url' => 'getLogoUrl',
        'subtext' => 'getSubtext',
        'provider_id' => 'getProviderId',
        'provider_display_name' => 'getProviderDisplayName',
        'provider_logo' => 'getProviderLogo',
        'health' => 'getHealth',
        'sub_providers' => 'getSubProviders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('logo_url', $data ?? [], null);
        $this->setIfExists('subtext', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('provider_display_name', $data ?? [], null);
        $this->setIfExists('provider_logo', $data ?? [], null);
        $this->setIfExists('health', $data ?? [], null);
        $this->setIfExists('sub_providers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['logo_url'] === null) {
            $invalidProperties[] = "'logo_url' can't be null";
        }
        if ($this->container['subtext'] === null) {
            $invalidProperties[] = "'subtext' can't be null";
        }
        if ($this->container['provider_id'] === null) {
            $invalidProperties[] = "'provider_id' can't be null";
        }
        if ($this->container['provider_display_name'] === null) {
            $invalidProperties[] = "'provider_display_name' can't be null";
        }
        if ($this->container['provider_logo'] === null) {
            $invalidProperties[] = "'provider_logo' can't be null";
        }
        if ($this->container['health'] === null) {
            $invalidProperties[] = "'health' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the provider
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The friendly, human-readable name of the provider
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url A URL pointing to the provider's logo
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        if (is_null($logo_url)) {
            throw new \InvalidArgumentException('non-nullable logo_url cannot be null');
        }
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets subtext
     *
     * @return string
     */
    public function getSubtext()
    {
        return $this->container['subtext'];
    }

    /**
     * Sets subtext
     *
     * @param string $subtext The Provider's subtext recommended to be shown next to the name.              This is flavor text, not a full, human-readable description of the provider.
     *
     * @return self
     */
    public function setSubtext($subtext)
    {
        if (is_null($subtext)) {
            throw new \InvalidArgumentException('non-nullable subtext cannot be null');
        }
        $this->container['subtext'] = $subtext;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string
     * @deprecated
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string $provider_id The ID of the provider
     *
     * @return self
     * @deprecated
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets provider_display_name
     *
     * @return string
     * @deprecated
     */
    public function getProviderDisplayName()
    {
        return $this->container['provider_display_name'];
    }

    /**
     * Sets provider_display_name
     *
     * @param string $provider_display_name The friendly, human-readable name of the provider
     *
     * @return self
     * @deprecated
     */
    public function setProviderDisplayName($provider_display_name)
    {
        if (is_null($provider_display_name)) {
            throw new \InvalidArgumentException('non-nullable provider_display_name cannot be null');
        }
        $this->container['provider_display_name'] = $provider_display_name;

        return $this;
    }

    /**
     * Gets provider_logo
     *
     * @return string
     * @deprecated
     */
    public function getProviderLogo()
    {
        return $this->container['provider_logo'];
    }

    /**
     * Sets provider_logo
     *
     * @param string $provider_logo A URL pointing to the provider's logo
     *
     * @return self
     * @deprecated
     */
    public function setProviderLogo($provider_logo)
    {
        if (is_null($provider_logo)) {
            throw new \InvalidArgumentException('non-nullable provider_logo cannot be null');
        }
        $this->container['provider_logo'] = $provider_logo;

        return $this;
    }

    /**
     * Gets health
     *
     * @return string
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param string $health The current health status of the provider
     *
     * @return self
     */
    public function setHealth($health)
    {
        if (is_null($health)) {
            throw new \InvalidArgumentException('non-nullable health cannot be null');
        }
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets sub_providers
     *
     * @return \Trinsic\Api\Model\SubProviderMetadata[]|null
     */
    public function getSubProviders()
    {
        return $this->container['sub_providers'];
    }

    /**
     * Sets sub_providers
     *
     * @param \Trinsic\Api\Model\SubProviderMetadata[]|null $sub_providers Metadata about the sub-providers which are available for this Provider.              For example, Italy's SPID is a Provider which aggregates access to multiple sub-providers.
     *
     * @return self
     */
    public function setSubProviders($sub_providers)
    {
        if (is_null($sub_providers)) {
            array_push($this->openAPINullablesSetToNull, 'sub_providers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_providers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sub_providers'] = $sub_providers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


