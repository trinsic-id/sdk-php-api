<?php
/**
 * CreateMdlExchangeRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Trinsic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trinsic API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Trinsic\Api\Model;

use \ArrayAccess;
use \Trinsic\Api\ObjectSerializer;

/**
 * CreateMdlExchangeRequest Class Doc Comment
 *
 * @category Class
 * @description Request to create an mDL Exchange.
 * @package  Trinsic\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateMdlExchangeRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateMdlExchangeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'verification_profile_id' => 'string',
        'provider' => 'string',
        'exchange_mechanism' => '\Trinsic\Api\Model\MdlExchangeMechanism',
        'document_type' => 'string',
        'name_spaces' => 'array<string,array<string,bool>>',
        'digital_credentials_api_host' => 'string',
        'android_native_app_package_name' => 'string',
        'android_native_app_signing_certificate_fingerprint' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'verification_profile_id' => 'uuid',
        'provider' => null,
        'exchange_mechanism' => null,
        'document_type' => null,
        'name_spaces' => null,
        'digital_credentials_api_host' => null,
        'android_native_app_package_name' => null,
        'android_native_app_signing_certificate_fingerprint' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'verification_profile_id' => false,
        'provider' => false,
        'exchange_mechanism' => false,
        'document_type' => false,
        'name_spaces' => false,
        'digital_credentials_api_host' => true,
        'android_native_app_package_name' => true,
        'android_native_app_signing_certificate_fingerprint' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verification_profile_id' => 'verificationProfileId',
        'provider' => 'provider',
        'exchange_mechanism' => 'exchangeMechanism',
        'document_type' => 'documentType',
        'name_spaces' => 'nameSpaces',
        'digital_credentials_api_host' => 'digitalCredentialsApiHost',
        'android_native_app_package_name' => 'androidNativeAppPackageName',
        'android_native_app_signing_certificate_fingerprint' => 'androidNativeAppSigningCertificateFingerprint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verification_profile_id' => 'setVerificationProfileId',
        'provider' => 'setProvider',
        'exchange_mechanism' => 'setExchangeMechanism',
        'document_type' => 'setDocumentType',
        'name_spaces' => 'setNameSpaces',
        'digital_credentials_api_host' => 'setDigitalCredentialsApiHost',
        'android_native_app_package_name' => 'setAndroidNativeAppPackageName',
        'android_native_app_signing_certificate_fingerprint' => 'setAndroidNativeAppSigningCertificateFingerprint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verification_profile_id' => 'getVerificationProfileId',
        'provider' => 'getProvider',
        'exchange_mechanism' => 'getExchangeMechanism',
        'document_type' => 'getDocumentType',
        'name_spaces' => 'getNameSpaces',
        'digital_credentials_api_host' => 'getDigitalCredentialsApiHost',
        'android_native_app_package_name' => 'getAndroidNativeAppPackageName',
        'android_native_app_signing_certificate_fingerprint' => 'getAndroidNativeAppSigningCertificateFingerprint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('verification_profile_id', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('exchange_mechanism', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('name_spaces', $data ?? [], null);
        $this->setIfExists('digital_credentials_api_host', $data ?? [], null);
        $this->setIfExists('android_native_app_package_name', $data ?? [], null);
        $this->setIfExists('android_native_app_signing_certificate_fingerprint', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['verification_profile_id'] === null) {
            $invalidProperties[] = "'verification_profile_id' can't be null";
        }
        if ($this->container['provider'] === null) {
            $invalidProperties[] = "'provider' can't be null";
        }
        if ($this->container['exchange_mechanism'] === null) {
            $invalidProperties[] = "'exchange_mechanism' can't be null";
        }
        if ($this->container['document_type'] === null) {
            $invalidProperties[] = "'document_type' can't be null";
        }
        if ($this->container['name_spaces'] === null) {
            $invalidProperties[] = "'name_spaces' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets verification_profile_id
     *
     * @return string
     */
    public function getVerificationProfileId()
    {
        return $this->container['verification_profile_id'];
    }

    /**
     * Sets verification_profile_id
     *
     * @param string $verification_profile_id The ID of the VerificationProfile to use for this mDL exchange.
     *
     * @return self
     */
    public function setVerificationProfileId($verification_profile_id)
    {
        if (is_null($verification_profile_id)) {
            throw new \InvalidArgumentException('non-nullable verification_profile_id cannot be null');
        }
        $this->container['verification_profile_id'] = $verification_profile_id;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider The ID of the provider to use for this mDL exchange.
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets exchange_mechanism
     *
     * @return \Trinsic\Api\Model\MdlExchangeMechanism
     */
    public function getExchangeMechanism()
    {
        return $this->container['exchange_mechanism'];
    }

    /**
     * Sets exchange_mechanism
     *
     * @param \Trinsic\Api\Model\MdlExchangeMechanism $exchange_mechanism The mechanism by which the mDL exchange will occur (web, native SDK, etc.)
     *
     * @return self
     */
    public function setExchangeMechanism($exchange_mechanism)
    {
        if (is_null($exchange_mechanism)) {
            throw new \InvalidArgumentException('non-nullable exchange_mechanism cannot be null');
        }
        $this->container['exchange_mechanism'] = $exchange_mechanism;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type The document type to request from the wallet.              Typically, this is one of the following values:              - `org.iso.18013.5.1.mDL` (Mobile Driver's License) - `com.google.wallet.idcard.1` (Google Wallet ID Pass)
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets name_spaces
     *
     * @return array<string,array<string,bool>>
     */
    public function getNameSpaces()
    {
        return $this->container['name_spaces'];
    }

    /**
     * Sets name_spaces
     *
     * @param array<string,array<string,bool>> $name_spaces The namespaces and fields to request from the mDL.              This is a nested map / dictionary. The outer dictionary's keys are namespaces (e.g. \"org.iso.18013.5.1\"). The inner dictionary's keys are field names within each namespace, with boolean values indicating whether the specified field will be retained post-verification.
     *
     * @return self
     */
    public function setNameSpaces($name_spaces)
    {
        if (is_null($name_spaces)) {
            throw new \InvalidArgumentException('non-nullable name_spaces cannot be null');
        }
        $this->container['name_spaces'] = $name_spaces;

        return $this;
    }

    /**
     * Gets digital_credentials_api_host
     *
     * @return string|null
     */
    public function getDigitalCredentialsApiHost()
    {
        return $this->container['digital_credentials_api_host'];
    }

    /**
     * Sets digital_credentials_api_host
     *
     * @param string|null $digital_credentials_api_host If using the `DigitalCredentialsApi` exchange mechanism, this is the hostname on which the Digital Credentials API will be called.              For example, if the user is on the page `https://foo.example.com/verify-mdl`, the proper value to use is `foo.example.com`.              Present for ease of testing only. May be removed as this API is stabilized.
     *
     * @return self
     */
    public function setDigitalCredentialsApiHost($digital_credentials_api_host)
    {
        if (is_null($digital_credentials_api_host)) {
            array_push($this->openAPINullablesSetToNull, 'digital_credentials_api_host');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('digital_credentials_api_host', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['digital_credentials_api_host'] = $digital_credentials_api_host;

        return $this;
    }

    /**
     * Gets android_native_app_package_name
     *
     * @return string|null
     */
    public function getAndroidNativeAppPackageName()
    {
        return $this->container['android_native_app_package_name'];
    }

    /**
     * Sets android_native_app_package_name
     *
     * @param string|null $android_native_app_package_name If using the `NativeApp` exchange mechanism with the `google-wallet` provider, this is the package name of the Android App which will execute the mDL exchange.              This should be set to the package name of your app.              Present for ease of testing only. May be removed as this API is stabilized.
     *
     * @return self
     */
    public function setAndroidNativeAppPackageName($android_native_app_package_name)
    {
        if (is_null($android_native_app_package_name)) {
            array_push($this->openAPINullablesSetToNull, 'android_native_app_package_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('android_native_app_package_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['android_native_app_package_name'] = $android_native_app_package_name;

        return $this;
    }

    /**
     * Gets android_native_app_signing_certificate_fingerprint
     *
     * @return string|null
     */
    public function getAndroidNativeAppSigningCertificateFingerprint()
    {
        return $this->container['android_native_app_signing_certificate_fingerprint'];
    }

    /**
     * Sets android_native_app_signing_certificate_fingerprint
     *
     * @param string|null $android_native_app_signing_certificate_fingerprint If using the `NativeApp` exchange mechanism with the `google-wallet` provider, this is the SHA-256 fingerprint of the signing certificate used to sign the Android App which will execute the mDL exchange.              Present for ease of testing only. May be removed as this API is stabilized.
     *
     * @return self
     */
    public function setAndroidNativeAppSigningCertificateFingerprint($android_native_app_signing_certificate_fingerprint)
    {
        if (is_null($android_native_app_signing_certificate_fingerprint)) {
            array_push($this->openAPINullablesSetToNull, 'android_native_app_signing_certificate_fingerprint');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('android_native_app_signing_certificate_fingerprint', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['android_native_app_signing_certificate_fingerprint'] = $android_native_app_signing_certificate_fingerprint;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


